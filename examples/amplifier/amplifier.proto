syntax = "proto3";
package axelar.amplifier.v1beta1;

// import "google/api/annotations.proto";

option go_package = "github.com/axelarnetwork/axelar-eds/pkg/amplifier/server/api";

service Amplifier {
  rpc Verify(stream VerifyRequest) returns (stream VerifyResponse);
  rpc GetPayload(GetPayloadRequest) returns (GetPayloadResponse) {
    option (google.api.http) = {
      get : "/v1beta1/payload/{hash}"
    };
  }
  rpc SubscribeToApprovals(SubscribeToApprovalsRequest)
      returns (stream SubscribeToApprovalsResponse);
  rpc SubscribeToWasmEvents(SubscribeToWasmEventsRequest)
      returns (stream SubscribeToWasmEventsResponse);
  rpc Broadcast(BroadcastRequest) returns (BroadcastResponse) {
    option (google.api.http) = {
      post : "/v1beta1/broadcast"
      body : "*"
    };
  }
}

message Message {
  string id = 1; // the unique identifier with which the message can be looked
                 // up on the source chain
  string source_chain = 2;
  string source_address = 3;
  string destination_chain = 4;
  string destination_address = 5;
  bytes payload = 6;
  // when we have a better idea of the requirement, we can add an additional
  // optional field here to facilitate verification proofs
}

message GetPayloadRequest { bytes hash = 1; }

message GetPayloadResponse { bytes payload = 1; }

message SubscribeToApprovalsRequest {
  repeated string chains = 1;
  optional uint64 start_height = 2; // can be used to replay events
}

message SubscribeToApprovalsResponse {
  string chain = 1;
  bytes execute_data = 2;
  uint64 block_height = 3;
}

message VerifyRequest { Message message = 1; }

message VerifyResponse {
  Message message = 1;
//  bool success = 2;
  optional Error error = 2;
}

enum ErrorCode {
  VERIFICATION_FAILED = 0;
  INTERNAL_ERROR = 1;
  AXELAR_NETWORK_ERROR = 2;
  INSUFFICIENT_GAS = 3;
}

message Error {
    string error = 1;
    ErrorCode error_code = 2;
}

message SubscribeToWasmEventsRequest { optional uint64 start_height = 1; }

message SubscribeToWasmEventsResponse {
  string type = 1;
  repeated Attribute attributes = 2;
  uint64 height = 3;
}

message Attribute {
  string key = 1;
  string value = 2;
}

message BroadcastRequest {
  string address = 1;
  bytes payload = 2;
}

message BroadcastResponse {
  bool result = 1;
}